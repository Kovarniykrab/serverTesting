basePath: /api
definitions:
  domain.ChangePassForm:
    properties:
      confirm_pass:
        description: |-
          подтверждение пароля
          Поле обязательно
        type: string
      old_password:
        description: |-
          cтарый пароль
          Поле обязательно
        type: string
      password:
        description: |-
          новый пароль
          Поле обязательно
        type: string
    type: object
  domain.ChangeUserForm:
    properties:
      date_of_birth:
        description: |-
          дата рождения
          Поле обязательно
        type: string
      name:
        description: |-
          имя пользователя
          Поле обязательно
        type: string
    type: object
  domain.RegisterUserForm:
    properties:
      confirm_password:
        description: |-
          подтверждение пароля
          Поле обязательно
        type: string
      date_of_birth:
        description: |-
          дата рождения
          Поле обязательно
        type: string
      email:
        description: |-
          Почта
          Поле обязательно
        type: string
      name:
        description: |-
          имя пользователя
          Поле обязательно
        type: string
      password:
        description: |-
          пароль
          Поле обязательно
        type: string
    type: object
  domain.UserAuthForm:
    properties:
      email:
        description: |-
          логин
          Поле обязательно
        type: string
      password:
        description: |-
          пароль
          Поле обязательно
        type: string
    type: object
  handlers.AuthResponse:
    properties:
      JWT:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.SuccessResponse:
    properties:
      message:
        type: string
    type: object
host: 82.147.71.226:8080
info:
  contact: {}
  description: API для управления пользователями
  title: TestUser API
  version: "0.5"
paths:
  /api/user/change_password:
    put:
      consumes:
      - application/json
      description: |-
        хендлер проверяет авторизован ли пользователь и запрашивает подтверждение пароля
        если все в порядке, пользователю подается форма, для изменения данных.
        затем пользователь подает форму на сервер, и они записываются вместо старых
      parameters:
      - description: 'Обязательные поля : password, confirm_password'
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/domain.ChangePassForm'
      produces:
      - application/json
      responses:
        "204":
          description: Пароль успешно изменен
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: изменение пользователя
      tags:
      - USER
  /api/user/change_user:
    put:
      consumes:
      - application/json
      description: |-
        хендлер принимает форму, в которой содержатся новые данные и данные оставшиеся без изменений.
        он записывает все данные вместо старых
      parameters:
      - description: Данные пользователя
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/domain.ChangeUserForm'
      produces:
      - application/json
      responses:
        "204":
          description: Данные успешно обновлены
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: изменение данных пользователя
      tags:
      - USER
  /api/user/delete/{id}:
    delete:
      consumes:
      - application/json
      description: |-
        Пользователя удаляют из системы по ID. Хендлер принимает ID,
        и с его помощью находит пользователя в базе данных и удаляет его из нее
      parameters:
      - description: 'Обязательные поля: id'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Пользователь успешно удален
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: запрашиваемая страница не существует
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Удаление пользователя
      tags:
      - USER
  /api/user/login:
    post:
      consumes:
      - application/json
      description: |-
        Авторизация происходит с помощью email и пароля
        хендлер принимает почту и пароль. По почте ищет пользователя и сверяет 2 хеша. Если они совпадают - пользователь авторизуется
        при авторизации пользоватcz проверяет временный jwt токен.
        если авторизация успешна, вызываются хендлеры, которые в свою очередь выдают пользователю данные профиля и историю его диалогов, внутри которых
        переписка с конкретным пользователем
      parameters:
      - description: 'Обязательные поля : email, password'
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/domain.UserAuthForm'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный вход
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Неверный Email/Password
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Авторизация
      tags:
      - USER
  /api/user/logout:
    post:
      consumes:
      - application/json
      description: |-
        сессия завершается по сигналу или по истечении токена
        пользователя должно выкинуть на страницу авторизации
      produces:
      - application/json
      responses:
        "204":
          description: успешный выход
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: выход
      tags:
      - USER
  /api/user/profile/{id}:
    get:
      consumes:
      - application/json
      description: хендлер получает ID или name и ищет пользователей по id или name
        в базе данных и выводит все результаты в форме списка.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь найден
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Поиск польхователя
      tags:
      - USER
  /api/user/register:
    post:
      consumes:
      - application/json
      description: |-
        во время регистации хендлер принимает данные, которые подает пользователь и проверяет
        если email не занят,
        то данные записываются на сервер в базу данных, пользователю присваивается id
        и отправляется письмо на почту, с просьбой подтвердить аккаунт и ссылкой, по которой нужно перейти для подтверждения аккаунта
        если занят email, на указанную почту приходит уведомление о том, что на его почту пытаются зарегестрировать новый аккаунт
      parameters:
      - description: 'Обязательные поля : email, password, name, confirm_password,
          date_of_birth'
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/domain.RegisterUserForm'
      produces:
      - application/json
      responses:
        "204":
          description: Пользователь успешно зарегестрирован
        "400":
          description: Неверный формат данных
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: регистрация
      tags:
      - USER
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
